name: Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        type: string

jobs:
  build-executables:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            arch: x64
          - os: macos-latest
            target: macos
            arch: x64
          - os: macos-latest
            target: macos
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install PyInstaller and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller click pydantic pyyaml openai anthropic jinja2 aiohttp tenacity rich httpx

    - name: Build executable
      run: |
        pyinstaller build.spec

    - name: Calculate SHA256 hashes
      run: |
        cd dist
        echo "SHA256 for ${{ matrix.target }}-${{ matrix.arch }}:"
        sha256sum pulsar-compose-${{ matrix.target }}-${{ matrix.arch }}.tar.gz
        echo "SHA256 hash: $(sha256sum pulsar-compose-${{ matrix.target }}-${{ matrix.arch }}.tar.gz | cut -d' ' -f1)" >> $GITHUB_STEP_SUMMARY

    - name: Upload executable artifact
      uses: actions/upload-artifact@v3
      with:
        name: pulsar-compose-${{ matrix.target }}-${{ matrix.arch }}
        path: dist/pulsar-compose-${{ matrix.target }}-${{ matrix.arch }}.tar.gz

  build-python-package:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: |
        pip install check-wheel-contents
        check-wheel-contents dist/*.whl

    - name: Upload Python package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-packages
        path: |
          dist/*.tar.gz
          dist/*.whl

  create-release:
    runs-on: ubuntu-latest
    needs: [build-executables, build-python-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Generate SHA256 summary
      run: |
        echo "## SHA256 Hashes for Homebrew Formula" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Update these values in pulsar.rb:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Linux x64
        if [ -f "artifacts/pulsar-compose-linux-x64/pulsar-compose-linux-x64.tar.gz" ]; then
          LINUX_SHA=$(sha256sum artifacts/pulsar-compose-linux-x64/pulsar-compose-linux-x64.tar.gz | cut -d' ' -f1)
          echo "- Linux x64: \`$LINUX_SHA\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        # macOS x64
        if [ -f "artifacts/pulsar-compose-macos-x64/pulsar-compose-macos-x64.tar.gz" ]; then
          MACOS_X64_SHA=$(sha256sum artifacts/pulsar-compose-macos-x64/pulsar-compose-macos-x64.tar.gz | cut -d' ' -f1)
          echo "- macOS x64: \`$MACOS_X64_SHA\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        # macOS ARM64
        if [ -f "artifacts/pulsar-compose-macos-arm64/pulsar-compose-macos-arm64.tar.gz" ]; then
          MACOS_ARM64_SHA=$(sha256sum artifacts/pulsar-compose-macos-arm64/pulsar-compose-macos-arm64.tar.gz | cut -d' ' -f1)
          echo "- macOS ARM64: \`$MACOS_ARM64_SHA\`" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "tag=${{ inputs.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body: |
          ## üöÄ Pulsar Compose ${{ steps.tag.outputs.tag }}

          Docker-like AI workflow orchestration engine.

          ### üì¶ Installation Options

          #### Option 1: Standalone Executable (Recommended)
          Download the executable for your platform and run:
          ```bash
          # Linux/macOS
          tar -xzf pulsar-compose-*.tar.gz
          sudo cp -r pulsar /usr/local/bin/
          ```

          #### Option 2: PyPI Package
          ```bash
          pip install pulsar-compose
          ```

          #### Option 3: Docker
          ```bash
          docker run lsalihi/pulsar-compose:${{ steps.tag.outputs.tag }}
          ```

          #### Option 4: Homebrew (macOS/Linux)
          ```bash
          brew install lsalihi/pulsar-compose/pulsar-compose
          ```

          ### üìã What's New
          - See [CHANGELOG.md](https://github.com/lsalihi/pulsar-compose/blob/main/CHANGELOG.md) for details

          ### üîó Links
          - [Documentation](https://pulsar-compose.readthedocs.io)
          - [Repository](https://github.com/lsalihi/pulsar-compose)

          ### üõ†Ô∏è For Maintainers
          After release, update the Homebrew formula:
          ```bash
          ./update-homebrew-formula.sh ${{ steps.tag.outputs.tag }}
          ```
        draft: false
        prerelease: ${{ contains(steps.tag.outputs.tag, 'rc') || contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'alpha') }}
        files: |
          artifacts/python-packages/*.tar.gz
          artifacts/python-packages/*.whl
          artifacts/pulsar-compose-linux-x64/*.tar.gz
          artifacts/pulsar-compose-macos-x64/*.tar.gz
          artifacts/pulsar-compose-macos-arm64/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*